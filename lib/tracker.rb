require File.join(File.dirname(__FILE__), '/../config/environment.rb')

module Tracker

  class Tracker
    attr_reader :project
    def initialize(token)
      @token = token
      raise TypeError unless @token.is_a? Token
    end

    def project(id)
      @project = Project.new(id, @token)
    end
  end # class Tracker::Tracker

  class Project
    attr_reader :name, :iteration_length, :id, :week_start_day, :point_scale, :api_url, :url, :token
    def initialize(id, token)
      @id = id
      @token = token.to_s
      @api_url = "http://www.pivotaltracker.com/services/v2/projects/#{@id}"
      @url = "http://www.pivotaltracker.com/projects/#{@id}"
      @project = Hpricot(open(@api_url, {"X-TrackerToken" => @token}))
      setup_project
    end

    def build_project(@project)
      @name = @project.at('name').inner_html
      @iteration_length = @project.at('iteration_length').inner_html
      @week_start_day = @project.at('week_start_day').inner_html
      @point_scale = @project.at('point_scale').inner_html.split(',')
    end

  end # class Tracker::Project

  class Token
    def initialize(options = {})
      @token = case
              when options.include?(:token)
                options[:token]
              when options.include?(:username) &&
                options.include?(:password)
                # If a token is not provided, it can be generated by passing a
                # hash with :user and :password keys
                get_token(options[:username],
                               options[:password]
                              )
              else
                raise ArgumentError, "Invalid key, expecting either <:token> or <:username> and <:password>"
              end
    end

    def to_s
      @token
    end

    protected

    def get_token(username, password)
      # According to http://www.pivotaltracker.com/help/api#retrieve_token this should work:
      # curl -u USERNAME:PASSWORD -X GET https://www.pivotaltracker.com/services/tokens/active
      (Hpricot(open("https://www.pivotaltracker.com/services/tokens/active", :http_basic_authentication => [username, password])).at('guid')).inner_html
    end

  end # class Tracker::Token

end
